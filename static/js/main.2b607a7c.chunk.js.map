{"version":3,"sources":["logo.svg","components/Timer.js","components/CustomTimer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Timer","state","secondCount","minuteCount","secondString","minuteString","isOn","timeUp","startClick","_this","startTimer","bind","Object","assertThisInitialized","stopClick","stopTimer","resetClick","resetTimer","_this2","this","myInterval","setInterval","setState","String","padStart","clearInterval","react_default","a","createElement","className","alert","name","onClick","Component","CustomTimer","App","components_CustomTimer","components_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gMCgGzBC,6MA7FbC,MAAQ,CACNC,YAAa,EACbC,YAAa,GACbC,aAAc,KACdC,aAAc,KACdC,MAAM,EACNC,QAAQ,KAGVC,WAAaC,EAAKC,WAAWC,KAAhBC,OAAAC,EAAA,EAAAD,CAAAH,MACbK,UAAYL,EAAKM,UAAUJ,KAAfC,OAAAC,EAAA,EAAAD,CAAAH,MACZO,WAAaP,EAAKQ,WAAWN,KAAhBC,OAAAC,EAAA,EAAAD,CAAAH,gFACA,IAAAS,EAAAC,MACa,IAApBA,KAAKlB,MAAMK,OACba,KAAKC,WAAaC,YAAY,WACG,IAA3BH,EAAKjB,MAAMC,YACbgB,EAAKI,SAAS,CACZpB,YAAa,GACbC,YAAae,EAAKjB,MAAME,YAAc,IAGxCe,EAAKI,SAAS,CACZpB,YAAagB,EAAKjB,MAAMC,YAAc,IAI1CgB,EAAKI,SAAS,CACZlB,aAAcmB,OAAOL,EAAKjB,MAAMC,aAChCG,aAAckB,OAAOL,EAAKjB,MAAME,aAChCG,MAAM,IAEJY,EAAKjB,MAAMC,YAAc,IAC3BgB,EAAKI,SAAS,CACZlB,aAAcmB,OAAOL,EAAKjB,MAAMC,aAAasB,SAAS,EAAG,KAGzDN,EAAKjB,MAAME,YAAc,IAC3Be,EAAKI,SAAS,CACZjB,aAAckB,OAAOL,EAAKjB,MAAME,aAAaqB,SAAS,EAAG,KAG9B,IAA3BN,EAAKjB,MAAME,aAAgD,IAA3Be,EAAKjB,MAAMC,cAC7CuB,cAAcP,EAAKE,YACnBF,EAAKI,SAAS,CACZf,QAAQ,MAGX,0CAKLkB,cAAcN,KAAKC,YACnBD,KAAKG,SAAS,CACZhB,MAAM,yCAKRa,KAAKG,SAAS,CACZpB,YAAa,EACbC,YAAa,GACbC,aAAc,KACdC,aAAc,KACdE,QAAQ,qCAIV,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACXV,KAAKlB,MAAMI,aADd,IAC6Bc,KAAKlB,MAAMG,cAEvCe,KAAKlB,MAAMM,QACVuB,MAAM,0DACRJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAME,KAAK,QAAQC,QAASb,KAAKX,YAAnD,SAGAkB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAME,KAAK,OAAOC,QAASb,KAAKL,WAAlD,QAGAY,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,MAAME,KAAK,QAAQC,QAASb,KAAKH,YAAnD,kBArFUiB,aCULC,mLARX,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,0BAJkBI,aCaXE,MATf,WACE,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAACS,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2b607a7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nclass Timer extends Component {\r\n  state = {\r\n    secondCount: 0,\r\n    minuteCount: 25,\r\n    secondString: \"00\",\r\n    minuteString: \"25\",\r\n    isOn: false,\r\n    timeUp: false\r\n  };\r\n\r\n  startClick = this.startTimer.bind(this);\r\n  stopClick = this.stopTimer.bind(this);\r\n  resetClick = this.resetTimer.bind(this);\r\n  startTimer() {\r\n    if (this.state.isOn === false) {\r\n      this.myInterval = setInterval(() => {\r\n        if (this.state.secondCount === 0) {\r\n          this.setState({\r\n            secondCount: 59,\r\n            minuteCount: this.state.minuteCount - 1\r\n          });\r\n        } else {\r\n          this.setState({\r\n            secondCount: this.state.secondCount - 1\r\n            //   secondString: String(this.state.secondCount)\r\n          });\r\n        }\r\n        this.setState({\r\n          secondString: String(this.state.secondCount),\r\n          minuteString: String(this.state.minuteCount),\r\n          isOn: true\r\n        });\r\n        if (this.state.secondCount < 10) {\r\n          this.setState({\r\n            secondString: String(this.state.secondCount).padStart(2, 0)\r\n          });\r\n        }\r\n        if (this.state.minuteCount < 10) {\r\n          this.setState({\r\n            minuteString: String(this.state.minuteCount).padStart(2, 0)\r\n          });\r\n        }\r\n        if (this.state.minuteCount === 0 && this.state.secondCount === 0) {\r\n          clearInterval(this.myInterval);\r\n          this.setState({\r\n            timeUp: true\r\n          });\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  stopTimer() {\r\n    clearInterval(this.myInterval);\r\n    this.setState({\r\n      isOn: false\r\n    });\r\n  }\r\n\r\n  resetTimer() {\r\n    this.setState({\r\n      secondCount: 0,\r\n      minuteCount: 25,\r\n      secondString: \"00\",\r\n      minuteString: \"25\",\r\n      timeUp: false\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"timer-div\">\r\n        <h1 className=\"timer\">\r\n          {this.state.minuteString}:{this.state.secondString}\r\n        </h1>\r\n        {this.state.timeUp &&\r\n          alert(\"Congratulations!! Now you can earned yourself a break.\")}\r\n        <div className=\"btn-group\">\r\n          <button className=\"btn\" name=\"start\" onClick={this.startClick}>\r\n            Start\r\n          </button>\r\n          <br />\r\n          <button className=\"btn\" name=\"stop\" onClick={this.stopClick}>\r\n            Stop\r\n          </button>\r\n          <br />\r\n          <button className=\"btn\" name=\"reset\" onClick={this.resetClick}>\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from \"react\";\r\n\r\nclass CustomTimer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"custom-div\">\r\n        <h1 className=\"title\">Pomodoro Timer</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CustomTimer;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Timer from \"./components/Timer\";\nimport CustomTimer from \"./components/CustomTimer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CustomTimer />\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}